{"id":603820771,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1639883744,"status_display":"Accepted","runtime":"366 ms","url":"/submissions/detail/603820771/","is_pending":"Not Pending","title":"Minimum Operations to Make the Array K-Increasing","memory":"127.2 MB","code":"class Solution {\npublic:\n    int lis(std::vector<int>& a){\n\n    if(a.size() == 0) return 0;\n\n    vector<int> b;\n\n    b.push_back(a[0]);\n\n    for(int i = 1; i < a.size(); i++){\n\n        if(b.back() <= a[i]) b.push_back(a[i]);\n\n        else{\n\n            int idx = upper_bound(b.begin(), b.end(), a[i]) - b.begin();\n\n            b[idx] = a[i];\n\n        }\n\n    }\n\n    return b.size();\n\n}\n    int kIncreasing(vector<int>& a, int k) {\n        int cost = 0,n=a.size();\n\n    for(int i = 0; i < k; i++){\n\n        vector<int> b;\n\n        for(int j = i; j < n; j+=k) {\n\n            b.push_back(a[j]);\n\n        }\n\n        cost += b.size() - lis(b);\n\n    }\n\n    return cost;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-make-the-array-k-increasing"}