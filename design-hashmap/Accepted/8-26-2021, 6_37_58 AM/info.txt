{"id":544271446,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1629939178,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/544271446/","is_pending":"Not Pending","title":"Design HashMap","memory":"56 MB","code":"class MyHashMap {\nprivate:\n    int maxn = 13333;\n    \n    struct Node {\n        int key;\n        int val;\n        Node* prev;\n        Node* next;\n    };\n    \n    Node* hash_map[13333];\npublic:\n   \n    \n    /** Initialize your data structure here. */\n    MyHashMap() {\n        for (int i=0;i<maxn;++i)\n            hash_map[i] = NULL;\n    }\n    \n    /** value will always be non-negative. */\n    void put(int key, int value) {\n        int hash_code = key % maxn;\n        Node* curr = hash_map[hash_code];\n        \n        if (curr==NULL) {\n            hash_map[hash_code] = new Node;\n        \thash_map[hash_code]->key = key; \n            hash_map[hash_code]->val = value;\n            hash_map[hash_code]->next = NULL;\n            hash_map[hash_code]->prev = NULL;\n        }\n        else {\n            Node* prev = NULL;\n            while (curr!=NULL) {\n                if (curr->key == key) break;\n                prev = curr;\n                curr = curr->next;\n            }\n            if (curr!=NULL) curr->val = value;\n            else {\n                curr = new Node;\n                curr->key = key;\n                curr->val = value;\n                curr->next = NULL;\n                curr->prev = prev;\n                prev->next = curr;\n            }\n        }\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    int get(int key) {\n        int hash_code = key % maxn;\n        Node* curr = hash_map[hash_code];\n        \n        while (curr!=NULL) {\n            if (curr->key == key) return curr->val;\n            curr = curr->next;\n        }\n        return -1;\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    void remove(int key) {\n        int hash_code = key % maxn;\n        Node* curr = hash_map[hash_code];\n        \n        while (curr!=NULL) {\n            if (curr->key==key) {\n                if (curr->prev==NULL && curr->next==NULL) {\n                    delete curr;\n                    hash_map[hash_code] = NULL;\n                }\n                else if (curr->prev==NULL) {\n                \thash_map[hash_code] = curr->next;\n                \thash_map[hash_code]->prev = NULL;\n                \tdelete curr;\n                }\n                else if (curr->next==NULL) {\n                \tcurr->prev->next = NULL;\n                \tdelete curr;\n                }\n                else {\n                \tcurr->prev->next = curr->next;\n                \tcurr->next->prev = curr->prev;\n                \t\n                    delete curr;\n                }\n                break;\n            }\n            curr = curr->next;\n        }\n    }\n};\n","compare_result":"111111111111111111111111111111111111","title_slug":"design-hashmap"}