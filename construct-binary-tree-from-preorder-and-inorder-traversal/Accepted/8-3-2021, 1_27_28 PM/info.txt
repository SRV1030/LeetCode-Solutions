{"id":532538859,"lang":"cpp","time":"7 months, 1 week","timestamp":1627976548,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/532538859/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int preInd=0;\n    int search(vector<int>& in,int x,int l,int h){\n        for(int i=l;i<=h;i++) if(in[i]==x) return i;\n        return -1;\n    }\n    TreeNode* build(vector<int>& pre, vector<int>& in,int l,int h){\n       if(l>h) return NULL;\n        TreeNode *root=new TreeNode(pre[preInd++]);\n        int i=search(in,root->val,l,h);\n        if(i!=-1){\n            root->left=build(pre,in,l,i-1);\n            root->right=build(pre,in,i+1,h);\n        }\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& p, vector<int>& in) {\n        return build(p,in,0,p.size()-1);\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}