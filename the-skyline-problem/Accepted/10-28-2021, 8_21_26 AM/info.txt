{"id":578317261,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1635388586,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/578317261/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"14.9 MB","code":"class Solution {\npublic:\n    static bool comp(pair<pair<int,int>,int>&a, pair<pair<int,int>,int>&b){\n        //first sort by x-coordinate\n        if(a.first.first != b.first.first)\n            return a.first.first < b.first.first;\n        //if both starting at same point, greater height is picked first\n        if(a.second==0 && b.second==0)\n            return a.first.second > b.first.second;\n        //if both ending at same point, lower height is picked first\n        if(a.second==1 && b.second==1)\n            return a.first.second < b.first.second;\n        //if one starting and one ending, start should come first (i.e. 0 < 1)\n        return a.second < b.second;\n    }\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        int n = buildings.size();\n        vector<pair<pair<int,int>,int>>v;\n        for(int i=0; i<n; i++){\n            v.push_back({{buildings[i][0],buildings[i][2]},0}); //0 means start\n            v.push_back({{buildings[i][1],buildings[i][2]},1}); //1 means end\n        }\n        \n        sort(v.begin(),v.end(),comp);\n        \n        //for(auto c: v) cout<<c.first.first<<\" \"<<c.first.second<<\" \"<<c.second<<endl;\n        \n        vector<vector<int>>ans;\n        multiset<int, greater<int>>ms;\n        ms.insert(0);\n        int maxH = 0;\n        \n        for(auto p: v){\n            int x = p.first.first;\n            int height = p.first.second;\n            int type = p.second;\n            \n            //start\n            if(type == 0){\n                ms.insert(height);\n                int mx = *ms.begin();\n                if(mx != maxH){\n                    maxH = mx;\n                    ans.push_back({x,maxH});\n                }\n            }\n            //end\n            else{\n                //ms.erase(height);\n                auto it = ms.find(height); if(it != ms.end()) ms.erase(it);\n                int mx = *ms.begin();\n                if(mx != maxH){\n                    maxH = mx;\n                    ans.push_back({x,maxH});\n                    \n                }\n            }\n            \n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}