{"id":507128961,"lang":"cpp","time":"9Â months","timestamp":1623556723,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507128961/","is_pending":"Not Pending","title":"Maximum Number of Removable Characters","memory":"N/A","code":"class Solution {\npublic:\n    bool isSubSequence(string str1, string str2,\n                                 int m, int n)\n{\n     \n   \n    if (m == 0)\n        return true;\n    if (n == 0)\n        return false;\n \n   \n    if (str1[m - 1] == str2[n - 1])\n        return isSubSequence(str1, str2, m - 1, n - 1);\n \n    return isSubSequence(str1, str2, m, n - 1);\n}\n    int maximumRemovals(string s, string p, vector<int>& r) {\n        unordered_map<char,int>mps;\n        unordered_map<char,int>mpp;\n        for(auto i:s)mps[i]++;\n        for(auto i:p)mpp[i]++;\n        int i;\n        for(i=0;i<r.size();i++){\n            if(mpp.count(s[r[i]])){\n                if(p.length()>r[i] && p[r[i]]==s[r[i]] && mps[s[r[i]]]>mpp[s[r[i]]]){\n                    string t=s;\n                    t.erase(r[i],1);\n                    // cout<<t<<\" \";\n                    if(!isSubSequence(p,t,p.length(),t.length())) return i;\n                } \n                else{\n                    if(mps[s[r[i]]]>mpp[s[r[i]]]){\n                    // cout<<i<<\" \";\n                    mps[s[r[i]]]--;\n                    } \n                    else return i;\n                }\n            }\n            else{\n                mps[s[r[i]]]--;\n                cout<<s<<\" \";\n            }\n        }      \n        return i;\n        \n        \n    }\n};","compare_result":"111111111111111111000000000000000000000000000000000000000000000000","title_slug":"maximum-number-of-removable-characters"}