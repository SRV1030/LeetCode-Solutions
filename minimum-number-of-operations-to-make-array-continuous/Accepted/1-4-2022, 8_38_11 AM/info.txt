{"id":612570989,"lang":"cpp","time":"2 months, 1 week","timestamp":1641264791,"status_display":"Accepted","runtime":"682 ms","url":"/submissions/detail/612570989/","is_pending":"Not Pending","title":"Minimum Number of Operations to Make Array Continuous","memory":"101.2 MB","code":"// Problem Link : https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/\nclass Solution {\npublic:\n    // Binary Search\n    // it will give index of target and if target is not present then it will give largest element which is smaller than target\n    int bsearch(vector<int>& nums, int target){\n        int l = 0, h = nums.size()-1;\n        \n        while(l <= h){\n            int m = l + (h-l)/2;\n            \n            if(target == nums[m])\n                return m;\n            else if(target < nums[m])\n                h = m-1;\n            else\n                l = m+1;\n        }\n        return h;\n    }\n    int minOperations(vector<int>& nums) {\n        // To remove duplicates\n        unordered_set<int> st;\n        int duplicates = 0;\n        for(int i = 0; i < nums.size(); i++){\n            if(st.count(nums[i]) == 0){\n                st.insert(nums[i]);\n            }else{\n                nums[i] = -1;\n                duplicates++;\n            }\n        }\n        int ans = nums.size();\n        \n        // sort an array\n        sort(nums.begin(), nums.end());\n        \n        for(int i = duplicates; i < nums.size(); i++){\n            int valid = nums[i]+nums.size()-1; // this will be largest valid number if we start from nums[i]\n            \n            int indx = bsearch(nums,valid); // index of largest valid number\n            int valid_numbers = indx-i+1; // numbers which are valid\n            ans = min(ans,(int)nums.size()-valid_numbers); // substract valid numbers from total numbers to get valid numbers.\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-make-array-continuous"}