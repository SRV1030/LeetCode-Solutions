{"id":614606849,"lang":"cpp","time":"2Â months","timestamp":1641519953,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/614606849/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    ListNode *head;\n    int c=0;\n    Solution(ListNode* head) {\n        this->head=head;\n        ListNode *t=head;\n        while(t){\n            c++;\n            t=t->next;\n        }\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n        int x=rand()%c;\n        ListNode *t=head;\n        while(x--) t=t->next;\n        return t->val;\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node"}