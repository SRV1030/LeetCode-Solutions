{"id":577748876,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1635294896,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/577748876/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSub(TreeNode* root,TreeNode* subRoot){\n        if(!root || !subRoot) return root==subRoot;\n        return root->val==subRoot->val && isSub(root->left,subRoot->left) && isSub(root->right,subRoot->right);\n            \n    }\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if(!root) return false;\n        if(!subRoot) return true;\n        return isSub(root,subRoot) ||  isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}