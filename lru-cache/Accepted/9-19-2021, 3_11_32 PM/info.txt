{"id":557438141,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1632043592,"status_display":"Accepted","runtime":"432 ms","url":"/submissions/detail/557438141/","is_pending":"Not Pending","title":"LRU Cache","memory":"178.6 MB","code":"class LRUCache {\npublic:\n    struct Node{\n        int key;\n        int val;\n        Node*prev;\n        Node*next;\n        Node(int k,int v){\n            key=k;\n            val=v;\n        }\n    };\n    Node *h=new Node(-1,-1),*t=new Node(-1,-1);\n    int cap;\n    unordered_map<int,Node*>mp;\n    void addNode(Node *n){\n        Node *temp=h->next;\n        h->next=n;\n        n->next=temp;\n        n->prev=h;\n        temp->prev=n;\n    }\n    void deleteNode(Node *node){\n        Node *temp=node->prev;\n        temp->next=node->next;\n        node->next->prev=temp;\n    }\n    LRUCache(int capacity) {\n        cap=capacity;\n        h->next=t;\n        t->prev=h;\n    }\n    \n    int get(int key) {\n        if(mp.count(key)){\n            Node* res=mp[key];\n            mp.erase(key);\n            deleteNode(res);\n            addNode(res);\n            mp[key]=h->next;\n            return res->val;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(mp.count(key)){\n            Node *r=mp[key];\n            mp.erase(key);\n            deleteNode(r);\n        }\n        else if(mp.size()==cap){\n            mp.erase(t->prev->key);\n            deleteNode(t->prev);\n        }\n        addNode(new Node(key,value));\n        mp[key]=h->next;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache"}