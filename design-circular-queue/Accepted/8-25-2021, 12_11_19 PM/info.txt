{"id":543839158,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1629872779,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/543839158/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"16.6 MB","code":"class MyCircularQueue {\npublic: int c,f,r,cap,*q;\n    MyCircularQueue(int k) {\n        c=0;\n        cap=k;\n        f=0;r=-1;\n        q=new int[k];\n    }\n    \n    bool enQueue(int value) {\n        if(isFull()) return false;\n        c++;\n        r=(r+1)%cap;\n        q[r]=value;\n        return true;\n    }\n    \n    bool deQueue() {\n        if(isEmpty()) return false;\n        f=(f+1)%cap;\n        c--;\n        return true;\n    }\n    \n    int Front() {\n       if(isEmpty()) return -1;\n       return q[f];\n    }\n    \n    int Rear() {\n        if(isEmpty()) return -1;\n        return q[r];\n    }\n    \n    bool isEmpty() {\n        return c==0;\n    }\n    \n    bool isFull() {\n        return c==cap;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}