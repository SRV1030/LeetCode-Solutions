{"id":614606306,"lang":"cpp","time":"2Â months","timestamp":1641519885,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/614606306/","is_pending":"Not Pending","title":"Car Pooling","memory":"17.2 MB","code":"class Solution {\npublic:\n    bool carPooling(vector<vector<int>>& v, int capacity) {\n        sort(v.begin(),v.end(),\n             [](vector<int>a,vector<int>b){return a[1]<b[1];});        \n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;    \n        int psg=0;\n        for(auto&i:v){\n            int nxtSt=i[1];\n            while(!pq.empty() && nxtSt>=pq.top().first){\n                psg-=pq.top().second;\n                pq.pop();\n            }\n            psg+=i[0];\n            if(psg>capacity) return false;\n            pq.push({i[2],i[0]});\n        }\n        return true;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"car-pooling"}