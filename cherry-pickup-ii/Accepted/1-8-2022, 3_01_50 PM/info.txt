{"id":615436690,"lang":"java","time":"2Â months","timestamp":1641633410,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/615436690/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"39.7 MB","code":"class Solution {\n\n    public int cherryPickup(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int dp[][][] = new int[m][n][n];\n\n        for (int row = m - 1; row >= 0; row--) {\n            for (int col1 = 0; col1 < n; col1++) {\n                for (int col2 = 0; col2 < n; col2++) {\n                    int result = 0;\n                    // current cell\n                    result += grid[row][col1];\n                    if (col1 != col2) {\n                        result += grid[row][col2];\n                    }\n                    // transition\n                    if (row != m - 1) {\n                        int max = 0;\n                        for (int newCol1 = col1 - 1; newCol1 <= col1 + 1; newCol1++) {\n                            for (int newCol2 = col2 - 1; newCol2 <= col2 + 1; newCol2++) {\n                                if (newCol1 >= 0 && newCol1 < n && newCol2 >= 0 && newCol2 < n) {\n                                    max = Math.max(max, dp[row + 1][newCol1][newCol2]);\n                                }\n                            }\n                        }\n                        result += max;\n                    }\n                    dp[row][col1][col2] = result;\n                }\n            }\n        }\n        return dp[0][0][n - 1];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii"}