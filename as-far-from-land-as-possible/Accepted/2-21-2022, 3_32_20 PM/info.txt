{"id":645907823,"lang":"cpp","time":"2 weeks, 6 days","timestamp":1645436840,"status_display":"Accepted","runtime":"115 ms","url":"/submissions/detail/645907823/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"21.5 MB","code":"class Solution {\npublic:\n    int x[4] = {1,0,-1,0};\n    int y[4] = {0,1,0,-1};\n    int maxDistance(vector<vector<int>>& grid) {\n        int mx = -1;\n        int n = grid.size();\n        vector<vector<int>>dis(n,vector<int>(n,-1));\n        queue<pair<int,int>>q;\n        for(int i=0;i<n;i++)\n        {\n            for(int j=0;j<n;j++)\n            {\n                if(grid[i][j]==1)\n                {\n                    dis[i][j]=0;\n                    q.push({i,j});\n                }\n            }\n        }\n        while(!q.empty())\n        {\n            pair<int,int>p = q.front();\n            q.pop();\n            for(int dir=0;dir<4;dir++)\n            {\n                int pos_x = p.first+x[dir];\n                int pos_y = p.second+y[dir];\n                if(pos_x>=0 && pos_x<n && pos_y >=0 && pos_y <n && dis[pos_x][pos_y]==-1)\n                {\n                    dis[pos_x][pos_y] = dis[p.first][p.second]+1;\n                    mx = max(mx,dis[pos_x][pos_y]);\n                    q.push({pos_x,pos_y});\n                }\n            }\n        }\n        return mx;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible"}