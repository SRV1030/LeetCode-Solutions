{"id":570337727,"lang":"cpp","time":"5Â months","timestamp":1634091633,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/570337727/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"60 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> v;\n    unordered_map<string,int>mp;\n    string  dfsPath(TreeNode* root,string p){\n        if(!root) return p+\"$\";\n        p+=to_string(root->val)+\"-\"+dfsPath(root->left,p)+\"-\"+dfsPath(root->right,p);\n        mp[p]++;\n        if(mp[p]==2)v.push_back(root);\n        return p;\n    }\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        dfsPath(root,\"\");\n        return v;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees"}