{"id":588329084,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1637112625,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/588329084/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"32.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass FindElements {\npublic:\n    unordered_set<int>st;\n    void fill(TreeNode* root,int v){\n        if(!root) return;\n        root->val=v;\n        st.insert(v);\n        fill(root->left,2*v+1);\n        fill(root->right,2*v+2);\n        \n    }\n    FindElements(TreeNode* root) {\n        fill(root,0);\n    }\n    bool find(int target) {\n        return st.count(target);\n    }\n};\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"1111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree"}