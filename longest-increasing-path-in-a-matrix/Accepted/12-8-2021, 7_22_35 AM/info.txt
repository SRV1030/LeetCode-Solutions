{"id":598601722,"lang":"cpp","time":"3Â months","timestamp":1638927455,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/598601722/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15.9 MB","code":"class Solution {\npublic:\n    vector<vector<int>> dp;\n    int r,c,dis=1;\n    int dx[4] = {0,1,0,-1};\n    int dy[4] = {1,0,-1,0};\n    int dfs(int i,int j,vector<vector<int>>& matrix){\n        if(dp[i][j]!=-1) return dp[i][j];\n        int cd=1;\n        for(int d=0;d<4;d++){\n            int x1=i+dx[d], y1=j+dy[d];\n            if(x1<0 || x1>=r || y1<0 || y1>=c || matrix[x1][y1]<=matrix[i][j]) continue;\n            cd = max(cd, 1+dfs(x1,y1,matrix));\n        }\n       return dp[i][j]=cd;\n    }\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        r=matrix.size();\n        c=matrix[0].size();\n        dp=vector<vector<int>>(r+1,vector<int>(c+1,-1));\n        for(int i=0;i<r;i++)\n            for(int j=0;j<c;j++)\n                dis=max(dis,(dfs(i,j,matrix)));\n        return dis;            \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}