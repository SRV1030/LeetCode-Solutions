{"id":596619858,"lang":"cpp","time":"3 months, 1 week","timestamp":1638582963,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/596619858/","is_pending":"Not Pending","title":"Stream of Characters","memory":"108 MB","code":"class Node{\n    Node *arr[26];\n    bool flag = false;\npublic:\n    \n    bool contains(char ch){ return arr[ch-'a'] != NULL; }\n    \n    void put(char ch, Node *newNode){ arr[ch - 'a'] = newNode;}\n    \n    Node *getNext(char ch){return arr[ch-'a'];}\n    \n    bool getFlag(){ return flag;}\n    \n    void setFlag(){ flag = true;} \n\t\n};\nclass StreamChecker {\npublic:\n    string streamString = \"\";\n    Node *root;\n    \n    void insert(string s){\n        Node *temp = root;\n        for(int i=s.size()-1;i>=0;i--){  //insert in reverse order\n            if(!temp->contains(s[i])) temp->put(s[i], new Node());\n            temp = temp->getNext(s[i]);\n        }\n        temp->setFlag();//set flag if you reach end of the string\n    }\n    \n    StreamChecker(vector<string>& words) {\n        root = new Node();\n        for(auto word : words) insert(word);\n        \n    }\n    \n    bool query(char letter) {\n        streamString += letter;\n        Node *temp = root;\n        //search from the end of the string\n        for(int i=streamString.size()-1;i>=0&&temp;i--){\n            if(!temp && !temp->contains(streamString[i])) return false;\n            \n            temp = temp->getNext(streamString[i]);\n            if(temp && temp->getFlag()) return true; //return true if you've reached the end\n        }\n        return false;    \n    }\n};","compare_result":"11111111111111111","title_slug":"stream-of-characters"}