{"id":540144176,"lang":"cpp","time":"6 months, 4 weeks","timestamp":1629246822,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/540144176/","is_pending":"Not Pending","title":"Maximum Students Taking Exam","memory":"7.5 MB","code":"class Solution {\npublic:\n    int n,m;\n    int ans = 0;\n    int dp[9][(1<<8)+2];  //dp[i][mask]: we are in row i(i is from [1,9]), state is mask\n    int avail[9];  //avail[i] is the mask representing available seats in row i\n        \n    int maxStudents(vector<vector<char>>& seats) {\n        n = seats.size(); m = seats[0].size();\n        memset(dp, -1, sizeof(dp));\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (seats[i-1][j] == '.') {\n                    avail[i] |= (1<<j);\n                }\n            }\n        }\n        \n        for (int mask = 0; mask < (1<<m); mask++) {\n            dp[0][mask] = 0;  //initialize all illegal states with 0\n        }\n        \n        for (int i = 1; i <= n; i++) {  //now we are at row i\n            for (int premask = 0; premask < (1<<m); premask++) {\n                if (dp[i-1][premask] == -1) continue;\n                for (int mask = 0; mask < (1<<m); mask++) {\n                    if ((mask & avail[i]) != mask) continue;\n                    if (mask&(mask>>1)) continue;  //if there is adjacent 1\n                    \n                    /*checking this row and last row*/\n                    if (mask&(premask<<1) || mask&(premask>>1)) continue;\n                    dp[i][mask] = max(dp[i][mask], dp[i-1][premask] + __builtin_popcount(mask));\n                }\n            }\n        }\n        \n        for (int mask = 0; mask < (1<<m); mask++) {\n            ans = max(ans, dp[n][mask]);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-students-taking-exam"}