{"id":561766547,"lang":"java","time":"5 months, 2 weeks","timestamp":1632737581,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/561766547/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"47.7 MB","code":"class Solution {\n    private class Job{\n        private int startTime;\n\n        private int endTime;\n        private int profit;\n\n        public Job(int sT, int eT, int p){\n\n            this.startTime = sT;\n            this.endTime = eT;\n            this.profit = p;\n\n        }\n    }\n\n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        List<Job> jobs = new ArrayList<>();\n        for (int i=0; i<startTime.length; i++) {\n            jobs.add(new Job(startTime[i],endTime[i], profit[i]));\n        }\n\n        Collections.sort(jobs, (a,b) -> ( a.endTime - b.endTime));\n        // Key => Time, Value => profitTillTime\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        int ans = 0;\n\n        for (Job currJob :  jobs) {\n            Integer entryTillStartTime = map.floorKey(currJob.startTime);\n            int maxProfitTillStartTime = entryTillStartTime ==null?0:map.get(entryTillStartTime);\n            ans = Math.max(ans, maxProfitTillStartTime+currJob.profit);\n            map.put(currJob.endTime, ans);\n        }\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"maximum-profit-in-job-scheduling"}