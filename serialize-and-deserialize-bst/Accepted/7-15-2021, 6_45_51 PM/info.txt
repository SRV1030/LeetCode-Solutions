{"id":522951015,"lang":"cpp","time":"8Â months","timestamp":1626354051,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/522951015/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"27 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    void ser(TreeNode* root,string &s){\n        if(!root){\n            s+= \",n\";\n            return;\n        }\n        \n        s+= \",\" + to_string(root->val);\n        ser(root->left, s);\n        ser(root->right, s);\n    }\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string s=\"\";\n        ser(root,s);\n        return s.substr(1,s.size()-1);\n    }\n    \n    void des(stringstream &s,TreeNode* &root){\n        string val;\n        getline(s,val,',');\n        if(val==\"n\"){\n            root=NULL;\n            return;\n        }\n         int v;\n        v = stoi(val);\n        root=new TreeNode(v);\n        des(s,root->left);\n        des(s,root->right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream s(data);\n        TreeNode *root;\n        des(s,root);\n        return root;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec* ser = new Codec();\n// Codec* deser = new Codec();\n// string tree = ser->serialize(root);\n// TreeNode* ans = deser->deserialize(tree);\n// return ans;","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst"}