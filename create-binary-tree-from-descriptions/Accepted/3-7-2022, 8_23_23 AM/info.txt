{"id":654882246,"lang":"cpp","time":"1Â week","timestamp":1646620703,"status_display":"Accepted","runtime":"1670 ms","url":"/submissions/detail/654882246/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"283.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(vector<vector<int>>& desc) {\n        unordered_map<TreeNode*,TreeNode*>mparent;\n        unordered_map<int,TreeNode*>mp;\n        for(auto& d:desc){\n            int p=d[0],c=d[1],isL=d[2];\n            TreeNode* parent = mp.count(p)?mp[p]:(mp[p]=new TreeNode(p));\n            TreeNode* child = mp.count(c)?mp[c]:(mp[c]=new TreeNode(c));\n            if(isL)parent->left=child;\n            else parent->right=child;\n            mparent[child]=parent;\n        }\n        TreeNode* root=mp.begin()->second;\n        while(mparent.count(root))root=mparent[root];\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions"}