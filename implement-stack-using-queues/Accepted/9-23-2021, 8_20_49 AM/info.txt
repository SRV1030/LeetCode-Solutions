{"id":559488968,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1632364549,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/559488968/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"6.9 MB","code":"class MyStack {\npublic:queue<int>q1;\n    /** Initialize your data structure here. */\n    MyStack() {\n        \n    }\n    \n    /** Push element x onto stack. */\n    void push(int x) {\n        int n=q1.size();\n        q1.push(x);\n        while(n--){\n            q1.push(q1.front());\n            q1.pop();\n        }\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        if(q1.empty())return -1;\n        int e=q1.front();\n        q1.pop();\n        return e;\n    }\n    \n    /** Get the top element. */\n    int top() {\n        return q1.front();\n    }\n    \n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues"}