{"id":575186147,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1634871968,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/575186147/","is_pending":"Not Pending","title":"Peeking Iterator","memory":"7.3 MB","code":"/*\n * Below is the interface for Iterator, which is already defined for you.\n * **DO NOT** modify the interface for Iterator.\n *\n *  class Iterator {\n *\t\tstruct Data;\n * \t\tData* data;\n *  public:\n *\t\tIterator(const vector<int>& nums);\n * \t\tIterator(const Iterator& iter);\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint next();\n *\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool hasNext() const;\n *\t};\n */\n\nclass PeekingIterator : public Iterator {\npublic:\n    int i=0;\n    vector<int>n;\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\n\t    // Initialize any member here.\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\n\t    // You should only use the Iterator interface methods.\n\t    n=nums;\n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tint peek() {\n        if(hasNext())return n[i];\n        return -1;\n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\tint next() {\n\t    if(hasNext())return n[i++];\n        return -1;\n\t}\n\t\n\tbool hasNext() const {\n\t    return i<n.size();\n\t}\n};","compare_result":"11111111111111","title_slug":"peeking-iterator"}