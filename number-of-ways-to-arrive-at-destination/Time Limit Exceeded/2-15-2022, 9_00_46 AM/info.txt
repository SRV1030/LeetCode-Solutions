{"id":641602400,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1644894946,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/641602400/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"N/A","code":"class Solution {\npublic:\n    int mn=0,c=0;\n    vector<int>vis;\n    void dfs(int src,int d,vector<vector<pair<int,int>>> &adj,int cost){\n        if(cost>mn) return;\n        if(src==d){\n            if(cost==mn)c++;\n            return;\n        }\n        // vis[src]=1;\n        for(auto&j:adj[src]){\n            // if(!vis[j.first]) \n            dfs(j.first,d,adj,cost+j.second);\n        }\n    }\n    int countPaths(int n, vector<vector<int>>& roads) {\n        vector<int> paths(n,INT_MAX);\n        vector<vector<pair<int,int>>>adj(n);\n        for(auto&i:roads){\n            adj[i[0]].push_back({i[1],i[2]});\n            adj[i[1]].push_back({i[0],i[2]});\n        }\n        paths[0]=0;\n        queue<int>q;\n        q.push(0);\n        while(!q.empty()){\n            int n=q.size();\n            while(n--){\n                int i=q.front();\n                q.pop();\n                for(auto& j:adj[i]){\n                    if(paths[j.first]>paths[i]+j.second){\n                        paths[j.first]=paths[i]+j.second;\n                        q.push(j.first);\n                    }\n                }\n            }\n        }\n        mn=paths[n-1];\n        vis=vector<int>(n);\n        dfs(0,n-1,adj,0);\n        return c;\n    }\n};\n\n","compare_result":"111100000000000000000000000000000000000000000000000000","title_slug":"number-of-ways-to-arrive-at-destination"}