{"id":641613245,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1644896146,"status_display":"Accepted","runtime":"130 ms","url":"/submissions/detail/641613245/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"30.3 MB","code":"#define ll long long int\n\nclass Solution {\npublic:\n    ll mn=0,c=0,md=1000000007;\n    int countPaths(int n, vector<vector<int>>& roads) {\n        vector<ll> paths(n,LONG_MAX),ways(n);\n        vector<vector<pair<int,int>>>adj(n);\n        for(auto&i:roads){\n            adj[i[0]].push_back({i[1],i[2]});\n            adj[i[1]].push_back({i[0],i[2]});\n        }\n        paths[0]=0;\n        ways[0]=1;\n        priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<>>pq;\n        pq.push({0,0});\n        while(!pq.empty()){\n           auto [w,i]=pq.top();\n           pq.pop();            \n           for(auto& j:adj[i]){\n               if(paths[j.first]>paths[i]+j.second){\n                   paths[j.first]=paths[i]+j.second;\n                   ways[j.first]=ways[i];\n                   pq.push({paths[j.first],j.first});\n               }\n               else if(paths[j.first]==j.second+w){\n                   ways[j.first]+=ways[i];\n                   ways[j.first]%=md;\n               }\n           }\n        } \n        return ways[n-1];\n    }\n};\n\n","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-arrive-at-destination"}