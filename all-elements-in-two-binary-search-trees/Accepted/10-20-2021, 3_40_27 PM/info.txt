{"id":574260113,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1634723727,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/574260113/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"86.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    void infill(TreeNode* root,vector<int>&ans){\n        if(!root) return;\n        infill(root->left,ans);\n        ans.push_back(root->val);\n        infill(root->right,ans);\n    }\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> a1,a2,res;\n        infill(root1,a1);\n        infill(root2,a2);\n        for(int i=0,j=0;i<a1.size()||j<a2.size();){\n            if(i>=a1.size() || (j<a2.size() && a2[j]<a1[i])) res.push_back(a2[j++]);\n            else res.push_back(a1[i++]);\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees"}