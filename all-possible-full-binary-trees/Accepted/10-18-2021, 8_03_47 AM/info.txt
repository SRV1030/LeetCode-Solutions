{"id":572949644,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1634523527,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/572949644/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"27.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,vector<TreeNode*>>mp;\n    vector<TreeNode*> helper(int n){\n        if(n==1) return mp[1];\n        if(mp.count(n)) return mp[n];\n        vector<TreeNode*> ans;\n        for(int i=1;i<n;i+=2){\n           vector<TreeNode*> left= helper(i);\n           vector<TreeNode*> right= helper(n-1-i);\n            for(auto& l:left)\n                for(auto& r:right){\n                    TreeNode* root=new TreeNode(0);\n                    root->left=l;\n                    root->right=r;\n                    ans.push_back(root);\n                }\n        }\n        return mp[n]=ans;\n    }\n    vector<TreeNode*> allPossibleFBT(int n) {\n        if(n%2==0) return{};        \n        mp[1].push_back(new TreeNode(0));\n        return helper(n);\n    }\n};","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees"}