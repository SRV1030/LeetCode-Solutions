{"id":562703756,"lang":"cpp","time":"5 months, 2 weeks","timestamp":1632882557,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/562703756/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"N/A","code":"class NumArray {\npublic: vector<int>org,st;\n    int n;\n    int constree(int si,int sl,int sr){\n        if(sl==sr){\n            st[si]=org[sl];\n            return st[si];\n        }\n        int m=sl+(sr-sl)/2;\n        st[si]=constree(2*si+1,sl,m)+constree(2*si+2,m+1,sr);\n        return st[si];\n    }\n    void updatetree(int si,int sl,int sr,int pos,int dif){\n        if(sl>pos || sr<pos) return;\n        st[si]+=dif;\n        if(sl!=sr){\n            int m=sl+(sr-sl)/2;\n            updatetree(2*si+1,sl,m,pos,dif);\n            updatetree(2*si+2,m+1,sr,pos,dif);            \n        }\n    }\n    int gets(int si,int sl,int sr,int ql,int qr){\n        if(ql<=sl && qr>=sr)return st[si];\n        if(sr<ql || sl>ql) return 0;\n        int m=sl+(sr-sl)/2;\n        st[si]=gets(2*si+1,sl,m,ql,qr)+gets(2*si+2,m+1,sr,ql,qr);\n        return st[si];  \n    }\n    NumArray(vector<int>& nums) {\n        org=nums;\n        n=org.size();\n        st=vector<int>(4*n);\n        constree(0,0,n-1);\n    }\n    \n    void update(int index, int val) {\n        int dif=val-org[index];\n        org[index]=val;\n        updatetree(0,0,n-1,index,dif);\n    }\n    \n    int sumRange(int left, int right) {        \n        return gets(0,0,n-1,left,right);\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */","compare_result":"110100000000011","title_slug":"range-sum-query-mutable"}