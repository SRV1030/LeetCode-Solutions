{"id":528511104,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1627293112,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/528511104/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"31.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    void ser(string &s,TreeNode* root){\n        if(!root){\n            s+=\",n\";\n            return;\n        }\n        s+=\",\"+to_string(root->val);\n        ser(s,root->left);\n        ser(s,root->right);        \n    }\n    string serialize(TreeNode* root) {\n        string s=\"\";\n        ser(s,root);\n        return s.substr(1,s.size()-1);\n    }\n\n    // Decodes your encoded data to tree.\n    void des(stringstream &s,TreeNode* &root){\n          string val;\n          getline(s,val,',');\n        if(val==\"n\"){\n            root=NULL;\n            return;\n        }\n        root= new TreeNode(stoi(val));\n        des(s,root->left);\n        des(s,root->right);   \n    }\n    TreeNode* deserialize(string data) {\n        stringstream s(data);\n        TreeNode *root;\n        des(s,root);\n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}