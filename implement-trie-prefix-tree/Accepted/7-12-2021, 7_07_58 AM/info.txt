{"id":521058493,"lang":"cpp","time":"8Â months","timestamp":1626052978,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/521058493/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"45 MB","code":"class Trie {\n    bool isEnd;\n    Trie *children[26];\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        isEnd=false;\n        for(int i=0;i<26;i++)children[i]=nullptr;\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        Trie *cur=this;\n        for(auto c:word){            \n            if(!cur->children[c-'a'])cur->children[c-'a']=new Trie;\n            cur=cur->children[c-'a'];\n        }\n        cur->isEnd=true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        Trie *cur=this;\n        for(auto c:word){\n            cur=cur->children[c-'a'];\n            if(!cur) return false;\n        }\n        return cur->isEnd;\n        \n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        Trie *cur=this;\n        for(auto c:prefix){\n            cur=cur->children[c-'a'];\n            if(!cur) return false;\n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}