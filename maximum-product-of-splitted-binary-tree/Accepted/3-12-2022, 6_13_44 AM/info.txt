{"id":658134928,"lang":"cpp","time":"2 days, 2 hours","timestamp":1647044924,"status_display":"Accepted","runtime":"151 ms","url":"/submissions/detail/658134928/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"77.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass Solution {\npublic:\n    long long int md=1e9+7,mx=0,ans=0;\n    int addchildval(TreeNode* root){\n        if(!root) return 0;\n        int l= addchildval(root->left)%md,r=addchildval(root->right)%md;\n        root->val=(root->val+l+r)%md;\n        return root->val;        \n    }\n    void findmx(TreeNode* root){\n        if(!root) return;\n        findmx(root->left);\n        findmx(root->right);\n        ans= max(ans,(root->val)*(mx - root->val));\n    }\n    int maxProduct(TreeNode* root) {\n        addchildval(root);\n        mx=root->val;\n        findmx(root);\n        return ans%md;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree"}