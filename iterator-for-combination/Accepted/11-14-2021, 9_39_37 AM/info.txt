{"id":586836643,"lang":"cpp","time":"3 months, 4 weeks","timestamp":1636862077,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/586836643/","is_pending":"Not Pending","title":"Iterator for Combination","memory":"12.9 MB","code":"class CombinationIterator {\npublic:vector<string>comb;\n    int ind=0;\n    void fillComb(string &c,int &mxl,string t,int i){\n        if(t.size()==mxl) comb.push_back(t);\n        else if(i>=c.size()) return;\n        else{\n            for(int j=i;j<c.size();j++){                \n                t+=c[j];\n                fillComb(c,mxl,t,j+1);\n                t.pop_back();\n            }\n        }\n    }\n    CombinationIterator(string characters, int combinationLength) {\n        string t;\n        fillComb(characters,combinationLength,t,0);\n    }\n    \n    string next() {\n        if(hasNext()) return comb[ind++];\n        return \"\";\n    }\n    \n    bool hasNext() {\n        return ind<comb.size();\n    }\n};\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);\n * string param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111","title_slug":"iterator-for-combination"}