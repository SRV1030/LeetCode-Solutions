{"id":564248057,"lang":"cpp","time":"5 months, 1 week","timestamp":1633136090,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/564248057/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"12.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic: \n    void dfs(TreeNode* &root,int i){\n        if(!root){\n            root=new TreeNode(i);\n            return;\n        }\n        if(root->val>i){\n            if(!root->left) root->left=new TreeNode(i);\n            else dfs(root->left,i);\n        }else{\n           if(!root->right) root->right=new TreeNode(i);\n           else dfs(root->right,i); \n        }\n    }\n    TreeNode* bstFromPreorder(vector<int>& pre) {\n        TreeNode* root=NULL; \n        for(auto&i:pre) dfs(root,i);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}