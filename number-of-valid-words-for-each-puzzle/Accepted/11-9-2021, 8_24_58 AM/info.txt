{"id":584260294,"lang":"cpp","time":"4Â months","timestamp":1636425598,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/584260294/","is_pending":"Not Pending","title":"Number of Valid Words for Each Puzzle","memory":"47.5 MB","code":"class Solution {\nprivate:\n    int bitmask(const string& word) {\n        // Build a bitmask of chars to represent each word\n        // the builtin std::bitset also works\n        int mask = 0;\n        for (char letter : word) {\n            mask |= 1 << (letter - 'a');\n        }\n        return mask;\n    }\n\npublic:\n    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {\n        unordered_map<int, int> wordCount;  // a vector instead of unordered_map also works\n        for (string& word : words) {\n            wordCount[bitmask(word)]++;\n        }\n        vector<int> result;\n        for (string& puzzle : puzzles) {\n            int first = 1 << (puzzle[0] - 'a');\n            int count = wordCount[first];\n\n            // Make bitmask but ignore the first character since it must always be there.\n            int mask = bitmask(puzzle.substr(1));\n\n            // iterate over the submask\n            for (int submask = mask; submask; submask = (submask - 1) & mask) {\n                count += wordCount[submask | first];  // add first character\n            }\n            result.push_back(count);\n        }\n        return result;\n    }\n};","compare_result":"1111111111","title_slug":"number-of-valid-words-for-each-puzzle"}