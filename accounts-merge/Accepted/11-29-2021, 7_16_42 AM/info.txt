{"id":594200833,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1638149502,"status_display":"Accepted","runtime":"480 ms","url":"/submissions/detail/594200833/","is_pending":"Not Pending","title":"Accounts Merge","memory":"128.2 MB","code":"class Solution {\npublic:\n\n    unordered_map<string, unordered_set<string>> adjList; // Using set will eliminate same emails\n    unordered_map<string, string> email_to_name;\n    unordered_map<string, bool> visited;\n    \n    void BFS(string email, vector<vector<string>> &res) {\n        visited[email] = true;    \n        queue<string> q;\n        q.push(email);\n        \n        // Each connected components group are stored here;\n        vector<string> connectedEmails;\n        // First Value is always the name \n        connectedEmails.push_back(email_to_name[email]);\n        \n        // Regular BFS\n        while(!q.empty()) {\n            email = q.front();\n            q.pop();\n            connectedEmails.push_back(email);\n            \n            for(auto newEmail: adjList[email]){\n                if(!visited[newEmail]) {\n                    visited[newEmail] = true;\n                    q.push(newEmail);\n                }\n            }\n        }\n        // Sort the emails, but remember first value was name, dont sort that too.\n        sort(connectedEmails.begin()+1, connectedEmails.end());\n        res.push_back(connectedEmails);\n    }\n    \n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n        // Building Graph\n        for(auto account: accounts) {\n            string name = account[0];\n            for(int i=1; i<account.size(); i++) {\n                email_to_name[account[i]] = name;\n                visited[account[i]] = false;\n                for(int j=1; j<account.size(); j++) { \n                    adjList[account[i]].insert(account[j]);\n                    adjList[account[j]].insert(account[i]);\n                }\n            }\n        }\n        \n         vector<vector<string>> res;\n        \n        // Checking for all Components of graph\n        for(auto email: adjList) {\n            if(!visited[email.first]) {\n                BFS(email.first, res);\n            }\n        }\n       \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge"}