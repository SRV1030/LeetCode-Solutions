{"id":480769527,"lang":"cpp","time":"11Â months","timestamp":1618452244,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/480769527/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* Inpre(TreeNode* rootH){\n        TreeNode * root=rootH;\n        while(root!=NULL && root->right!=NULL)root=root->right;\n        return root;\n    }\n    TreeNode* Insuc(TreeNode* rootH){\n        TreeNode * root=rootH;\n        while(root!=NULL && root->left!=NULL)root=root->left;\n        return root;\n    }\n    int height(TreeNode* root){\n        if(root==NULL) return 0;\n        return max(height(root->left),height(root->right))+1;\n    }\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if(root==NULL) return NULL;        \n        if(root->val>key) deleteNode(root->left,key);\n        else if (root->val<key) deleteNode(root->right,key);\n        else{\n            if(root->left==NULL && root->right==NULL){\n                root=NULL;\n                return root;\n            }  \n            else if(root->left==NULL){\n                TreeNode* temp= root->right;\n                delete root;\n                return temp;\n            }\n            else if(root->right==NULL){\n                TreeNode* temp= root->left;\n                delete root;\n                return temp;\n            }\n                if(height(root->left)>height(root->right)){\n                    // cout<<height(root->left)<<\"\\n\";\n                    TreeNode* temp= Inpre(root->left);\n                    root->val=temp->val;\n                    root->left=deleteNode(root->left,temp->val);\n                }\n                else{\n                    TreeNode* temp= Insuc(root->right);\n                     root->val=temp->val;\n                    root->right=deleteNode(root->right,temp->val);\n                } \n            }\n        return root;\n        }\n        \n        \n    \n};","compare_result":"1111110010010101000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst"}