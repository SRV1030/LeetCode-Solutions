{"id":575191419,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1634872698,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/575191419/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        bool nxtlvl=false;\n        queue<TreeNode*>q;\n        q.push(root);\n        while(!q.empty()){\n            int n=q.size();\n            nxtlvl=false;\n            while(n--){\n                TreeNode* r=q.front();\n                q.pop();\n                if((!r->left && !r->right && nxtlvl) || (!r->left && r->right)) return false;\n                if(r->left){\n                    nxtlvl=true;\n                    q.push(r->left);\n                }\n                if(r->right) q.push(r->right);\n            }\n        }\n        return true;\n    }\n};","compare_result":"11111111100010111100111011111011110001100010111011111111011010111111111111101111111111111111111111111111111111111111110","title_slug":"check-completeness-of-a-binary-tree"}