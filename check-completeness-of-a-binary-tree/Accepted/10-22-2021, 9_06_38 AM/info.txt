{"id":575192854,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1634872898,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/575192854/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        bool end=false;\n        queue<TreeNode*>q;\n        q.push(root);\n        while(!q.empty()){\n            TreeNode* r=q.front();\n            if(!r)end=true;\n            else if(end) return false;\n            if(r){\n                q.push(r->left);\n                q.push(r->right);\n            }\n            q.pop();\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}