{"id":569242482,"lang":"cpp","time":"5Â months","timestamp":1633927322,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/569242482/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7.1 MB","code":"class MyQueue {\npublic: stack<int>s1,s2;\n    /** Initialize your data structure here. */\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        while(!s1.empty()){\n            int x=s1.top();\n            s2.push(x);\n            s1.pop();\n        }\n        s1.push(x);\n        while(!s2.empty()){\n            int x=s2.top();\n            s1.push(x);\n            s2.pop();\n        }\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        if(s1.empty()) return -1; \n        int x=s1.top();\n        s1.pop();\n        return x;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        return s1.top();\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return s1.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"111111111111111111111","title_slug":"implement-queue-using-stacks"}