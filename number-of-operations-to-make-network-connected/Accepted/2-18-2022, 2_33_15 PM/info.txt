{"id":643813186,"lang":"cpp","time":"3 weeks, 2 days","timestamp":1645174095,"status_display":"Accepted","runtime":"145 ms","url":"/submissions/detail/643813186/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"39.2 MB","code":"class Solution {\npublic:\n    \n    vector<int> parent;\n    vector<int> rank;\n    \n    int findPar(int u){\n        if(parent[u]==u) return u;\n        return parent[u]=findPar(parent[u]); //path compresssion, storing the computed value;\n    }\n    \n    void unionn(int u, int v){\n        u= findPar(u);\n        v= findPar(v);\n        if(rank[u]<rank[v])\n            parent[u]=v;\n        else if(rank[v]<rank[u])\n            parent[v]=u;\n        else {\n            parent[v]=u;\n            rank[u]++;\n        }\n    }\n    \n    int makeConnected(int n, vector<vector<int>>& conn) {\n        if(conn.size()< n-1) return -1; // to combine n computer we require n-1 wires but here it's not the case\n        \n        //filling parent and rank array;\n        for(int i=0;i<n;i++)\n            parent.push_back(i), rank.push_back(0);\n        \n        //iterating to connection array and connecting them\n        for(auto &it: conn)\n            unionn(it[0], it[1]);\n        \n        //counting number of different components;\n        int differentComponents= 0;\n        for(int i=0;i<n;i++)\n            if(parent[i]==i) differentComponents++;\n        \n        //total {DifferentComponents} components are there and we need to join them in mininimum cable \n        //so best way to join them will be linearly( think ) which will require DifferentComponents-1 cables only;\n        return differentComponents-1;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}