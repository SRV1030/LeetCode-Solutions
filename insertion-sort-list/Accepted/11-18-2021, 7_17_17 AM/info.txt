{"id":588839617,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1637199137,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/588839617/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"9.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sorted;\n    void sortedInsert(ListNode* cur){\n        if(!sorted || cur->val<sorted->val){\n            cur->next=sorted;\n            sorted=cur;\n        }\n        else{\n            ListNode * pre=sorted;\n            while(pre->next && pre->next->val<cur->val) pre=pre->next;\n            cur->next=pre->next;\n            pre->next=cur;\n        }\n    }\n    ListNode* insertionSortList(ListNode* head) {\n        ListNode * cur=head;\n        sorted=NULL;\n        while(cur){\n            ListNode* nxt=cur->next;\n            sortedInsert(cur);\n            cur=nxt;\n        }\n        return sorted;\n    }\n};","compare_result":"1111111111111111111","title_slug":"insertion-sort-list"}