{"id":533049796,"lang":"cpp","time":"7 months, 1 week","timestamp":1628059026,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/533049796/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic: int pi;\n    int search(vector<int>& in,int k,int l,int h){\n        for(int i=l;i<=h;i++)if(in[i]==k) return i;\n        return -1;\n    }\n    TreeNode* build(vector<int>& in, vector<int>& po,int l,int r){\n        if(l>r) return NULL;\n        TreeNode* root=new TreeNode(po[pi--]);\n        int i=search(in,root->val,l,r);\n        if(i!=-1){            \n            root->right=build(in,po,i+1,r);\n            root->left=build(in,po,l,i-1);\n        }\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& in, vector<int>& po) {\n        int n=po.size();\n        pi=n-1;\n        return build(in,po,0,n-1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}