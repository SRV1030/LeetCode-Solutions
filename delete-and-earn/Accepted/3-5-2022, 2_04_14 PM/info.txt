{"id":653673216,"lang":"cpp","time":"1 week, 1 day","timestamp":1646468354,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/653673216/","is_pending":"Not Pending","title":"Delete and Earn","memory":"9.3 MB","code":"// class Solution {\n// public:\n//     int deleteAndEarn(vector<int>& nums) {\n//     int n = 10001;\n//     vector<int> sum(n, 0);\n//     vector<int> dp(n, 0);\n    \n//     for(auto num: nums){\n//         sum[num] += num;\n//     }\n    \n//     dp[0] = 0;\n//     dp[1] = sum[1];\n//     //now apply the house robbing concept\n//     for(int i=2; i<n; i++){\n//         dp[i] = max(dp[i-2] + sum[i], dp[i-1]);\n//     }\n    \n//     return dp[n-1];\n// }\n// };\n\nclass Solution {\npublic:\n    int dp[20001];\n    int solve(vector<int>& nums, int pos){\n        if(pos>=nums.size()) return 0;\n        if(dp[pos]!=-1) return dp[pos];\n        \n        int cur = nums[pos];\n        int sum = nums[pos];\n        int idx = pos+1;\n        \n        //add all element which is equal to current element\n        while(idx < nums.size() && nums[idx] == cur){\n            sum+=nums[idx];\n            idx++;\n        }\n        \n        //skip all value which is equal to current value + 1;\n        while(idx < nums.size() && nums[idx] == cur+1){\n            idx++;\n        }\n        \n        return dp[pos] = max(sum+solve(nums, idx), solve(nums, pos+1));\n    }\n    \n    int deleteAndEarn(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        memset(dp,-1,sizeof(dp));\n        return solve(nums, 0);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"delete-and-earn"}