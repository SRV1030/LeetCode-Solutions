{"id":542780748,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1629702057,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/542780748/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"65.1 MB","code":"class Solution {\npublic:bool f=true;\n    void dfs(vector<vector<int>> &g,vector<int>&vis,int col,int src,int p){\n        if(!f) return;\n        vis[src]=col;\n        for(auto& i:g[src]){\n            if(!vis[i])\n                dfs(g,vis,3-col,i,src);\n            else if(i!=p && vis[i]==vis[src]) f=false;\n        }\n    }\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        vector<vector<int>>g(n+1);\n        for(auto& i:dislikes){\n            g[i[0]].push_back(i[1]);\n            g[i[1]].push_back(i[0]);\n        }\n        vector<int>vis(n+1);\n        for(int i=1;i<=n;i++){\n            if(!vis[i] && !g[i].empty())dfs(g,vis,1,i,-1);\n            if(!f) return f;\n        }\n        return f;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition"}