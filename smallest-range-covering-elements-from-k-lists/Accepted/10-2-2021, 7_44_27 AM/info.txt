{"id":564264558,"lang":"cpp","time":"5 months, 1 week","timestamp":1633139967,"status_display":"Accepted","runtime":"241 ms","url":"/submissions/detail/564264558/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"21.8 MB","code":"class Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        vector<int> v={-100000,100000};\n        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>>pq;\n        int mx=INT_MIN,n=nums.size(),d=INT_MAX;\n        for(int i=0;i<n;i++){\n            if(nums[i][0]>mx)mx=nums[i][0];\n            pq.push({nums[i][0],i,0});\n        }        \n        while(!pq.empty()){\n            vector<int>mn=pq.top();\n            pq.pop();\n            int td=mx-mn[0];\n            if(td<d){\n                d=td;\n                v={mn[0],mx};\n            }\n            if(mn[2]+1<nums[mn[1]].size()){\n                if(nums[mn[1]][mn[2]+1]>mx)mx=nums[mn[1]][mn[2]+1];\n                pq.push({nums[mn[1]][mn[2]+1],mn[1],mn[2]+1});\n            }\n            else break;\n        }\n        return v;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists"}