{"id":597074199,"lang":"cpp","time":"3 months, 1 week","timestamp":1638671784,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/597074199/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"105.8 MB","code":"class Trie{\n    public:\n    bool isEnd;\n    Trie* children[26];\n    Trie(){\n        isEnd=false;\n        for(int i=0;i<26;i++)children[i]=NULL;\n    }\n    \n};\n\n\nclass WordDictionary {\npublic:\n    Trie* head;\n    WordDictionary() {\n        head=new Trie();\n    }\n    \n    void addWord(string word) {\n        Trie* t=head;\n        for(auto& i:word){\n            if(!t->children[i-'a'])t->children[i-'a']=new Trie;\n            t=t->children[i-'a'];\n        }\n        t->isEnd=true;\n    }\n    bool find(string word,int i, Trie* t){\n        if(i==word.size())return t->isEnd;\n        if(word[i]=='.'){\n            for(int j=0;j<26;j++)\n                if(t->children[j] && find(word,i+1,t->children[j])) return true;\n        }else{\n            if(!t->children[word[i]-'a']) return false;\n            return find(word,i+1,t->children[word[i]-'a']);\n        }\n        return false;\n    }\n    bool search(string word) {\n        Trie* t=head;\n        return find(word,0,t);\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}