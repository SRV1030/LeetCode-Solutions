{"id":546945826,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1630369834,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/546945826/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"13.1 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    queue<int>q;\n    NestedIterator(vector<NestedInteger> &nestedList) {\n       create(nestedList);\n    }\n    void create(vector<NestedInteger> &nestedList){\n        for(auto& i:nestedList){\n            if(i.isInteger())q.push(i.getInteger());\n            else create(i.getList());\n        }\n    }\n    \n    int next() {\n        int x=q.front();\n        q.pop();\n        return x;\n    }\n    \n    bool hasNext() {\n        return !q.empty();\n    }\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}